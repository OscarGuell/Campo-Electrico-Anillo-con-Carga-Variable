## Función para calcular el vector campo eléctrico en un punto dado.

def campo_electrico(x0, y0, z0, R1, R2, sigma):

  # Expresión en común para cada componente.
  func = lambda r, theta: r**2 / ((x0 - r*np.cos(theta))**2 + (y0 - r*np.sin(theta))**2 + z0**2)**(3/2)
  # Definir constantes a emplear.
  epsilon = 8.85418781762e-12
  const = -sigma/(4*np.pi*epsilon*R2)

  # Definir las expresiones a integrar.
  integrando_x = lambda r, theta: const * r**2 * (x0 - r*np.cos(theta)) / ((x0 - r*np.cos(theta))**2 + (y0 - r*np.sin(theta))**2 + z0**2)**(3/2)
  integrando_y = lambda r, theta: const * r**2 * (y0 - r*np.sin(theta)) / ((x0 - r*np.cos(theta))**2 + (y0 - r*np.sin(theta))**2 + z0**2)**(3/2)
  integrando_z = lambda r, theta: const * r**2 * z0 / ((x0 - r*np.cos(theta))**2 + (y0 - r*np.sin(theta))**2 + z0**2)**(3/2)

  # Calcular la integral doble de cada componente.
  E_x, err_x = dblquad(integrando_x, 0, 2*np.pi, lambda _: R1, lambda _: R2)
  E_y, err_y = dblquad(integrando_y, 0, 2*np.pi, lambda _: R1, lambda _: R2)
  E_z, err_z = dblquad(integrando_z, 0, 2*np.pi, lambda _: R1, lambda _: R2)
  # Nota: Las variables 'err_i' representan el error cometido en la integración de la componente 'i'.

  return np.array([E_x, E_y, E_z])

## Función para generar el anillo con su campo eléctrico, en función de R1, R2 y sigma.
# Nota: 'imRes' es la resolución gráfica del anillo y 'cpRes' es la escala del campo vectorial a calcular.

def ring_generator(R1, R2, sigma, imRes, cpRes):
  # Crear el dato imagen a emplear para graficar.
  fig = plt.figure(figsize=(12,10))
  # Crear el espacio 3D, con ejes cuadriculados.
  ax = fig.add_subplot(111, projection='3d')

  ## Generar el anillo mediante coordenadas polares.

  # Radio, R1 < r < R2.
  R = np.linspace(R1, R2, imRes)
  # Ángulo, 0 < θ < 2π.
  θ = np.linspace(0, 2*np.pi, imRes)
  # Establecer como grillas 2D.
  R, θ = np.meshgrid(R, θ)

  ## Cambio de variable a coordenadas cartesianas.
  x = R*np.cos(θ)
  y = R*np.sin(θ)
  #x,y = np.meshgrid(x,y)
  z = np.zeros((imRes,imRes))

  ## Definir región vectorial.
  # Nota: Escala con un orden de imRes³.
  X = np.linspace(-R2*1.3, R2*1.3, cpRes)
  Y = np.linspace(-R2*1.3, R2*1.3, cpRes)
  Z = np.linspace(-R2*1.3, R2*1.3, cpRes)
  # Ciclo para recorrer todos los puntos.
  for i in range(cpRes):
    for j in range(cpRes):
      for k in range(cpRes):
        E = campo_electrico(X[i], Y[j], Z[k], R1, R2, sigma)
        # Generar el vector en cada punto.
        ax.quiver(X[i], Y[j], Z[k], E[0], E[1], E[2], color='red', normalize=True)

  ## Graficar la superficie en 3D.
  ax.plot_surface(x, y, z, color='#2a3439')
  ax.set_xlabel('X')
  ax.set_ylabel('Y')
  ax.set_zlabel('Z')
  ax.set_xlim(-R2*1.5, R2*1.5)
  ax.set_ylim(-R2*1.5, R2*1.5)
  ax.set_zlim(-R2*1.5, R2*1.5)
  ax.set_title(f'Anillo de radio interno R1={R1} y radio externo R2={R2}')
  plt.show()

ring_generator(2, 4, 1e-9, 50, 10)
